package core.basesyntax;

public class MyHashMap<K, V> implements MyMap<K, V> {
    private static final int INITIAL_CAPACITY = 16;
    private static final int LOAD_FACTOR = 2;
    private Node<K, V>[] array;
    private static int capacity;
    private int size = 0;
    private int threshold;

    MyHashMap() {
        array = new Node[INITIAL_CAPACITY];
    }

    @Override
    public void put(K key, V value) {
        putValue(hash(key), key, value);
        size++;
    }

    private void putValue(int position, K key, V value) {
        Node<K, V>[] tempArray;
        int tempHash = hash(key);

        //–≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –º–∞–ø–∞ –ø—É—Å—Ç–∞—è
        if (array == null || array.length == 0) {
            array = resize();
        }
        /* –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –º–∞–ø–∞ –Ω–µ –ø—É—Å—Ç–∞—è –∏ –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        1. –ï—Å–ª–∏ —è—á–µ–π–∫–∞ –º–∞—Å—Å–∏–≤–∞ –ø—É—Å—Ç–∞—è, –¥–æ–±–∞–≤–∏–º.
        2. –ï—Å–ª–∏ —è—á–µ–π–∫–∞ –º–∞—Å—Å–∏–≤–∞ –Ω–µ –ø—É—Å—Ç–∞—è, –¥–æ–±–∞–≤–∏–º.
         */
        if (array[tempHash] == null) {
            array[tempHash] = new Node<>(tempHash, key, value, null);
        } else {
            // –ù—É–∂–Ω–∞ –¥–æ–ø –ø—Ä–æ–≤–µ—Ä–∫–∞, –∞ –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∫–ª—é—á TODO
            Node<K, V> tempNode = array[tempHash];
            while (tempNode.next != null) {
                tempNode = tempNode.next;
            }
            tempNode = new Node<>(tempHash, key, value, null);
        }
        if (++size > threshold) {
            resize();
        }
    }

    private Node<K, V>[] resize() {
        Node<K, V>[] tempArray = array;
        array = new Node[tempArray.length * LOAD_FACTOR];
        for (Node<K, V> tempNode : tempArray) {
            if (tempNode != null) {
                put(tempNode.key, tempNode.value);
                if (tempNode.next != null) {

                }
            }
        }


        return array;
    }

    private Node<K, V> takeLastNode(Node<K, V> node) {
        while (node.next != null) {
            node = node.next;
        }
        return node;
    }

    private int hash(Object key) {
        int h;
        return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);
    }

    @Override
    public V getValue(K key) {
        return null;
    }

    @Override
    public int getSize() {
        return size;
    }

    private static class Node<K, V> {
        private int hash;
        private Node<K, V> next;
        private K key;
        private V value;

        public Node(int hash, K key, V value, Node<K, V> next) {
            this.hash = hash;
            this.key = key;
            this.value = value;
            this.next = next;
        }


    }
}
/*
–•–µ—à–º–∞–ø–∞
1. –ò–º–µ–µ—Ç –ø–æ–ª–µ Node[] - —Ä–∞–∑–º–µ—Ä–æ–º –≤ 16 üëå
a) Node –∏–º–µ–µ—Ç –ø–æ–ª–µ int hash  üëå
2. –í–Ω—É—Ç—Ä–∏ –º–µ—Ç–æ–¥–∞ put, –µ—Å—Ç—å –º–µ—Ç–æ–¥ –∫–æ—Ç–æ—Ä—ã–π —Å—á–∏—Ç–∞–µ—Ç —Ö–µ—à –∫–ª—é—á–∞(–ø—Ä–∞–≤–∫–∞ –≤ –ë), –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è
–ø–æ–¥–ø—É–Ω–∫—Ç –ø–æ put, –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ putVal(hash(key), key, value ... ) –æ—Å—Ç–∞–ª—å–Ω–æ–µ –≤—Ä—è–¥ –ª–∏ –Ω—É–∂–Ω–æ üëå
–∞)   –≤ —Å–ª—É—á–∞–µ null = 0 || key.hashcode() ^ >>> 16 (—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∏—Ç—å—Å—è –ø–æ –æ—Å—Ç–∞—Ç–∫—É –Ω–∞ 16) üëå
–±) (!) –í—ã—á–∏—Å–ª—è–µ—Ç –Ω–µ —Ö–µ—à, –∞ –º–µ—Å—Ç–æ –≤ –º–∞—Å—Å–∏–≤–µ –∫—É–¥–∞ —ç—Ç–æ—Ç key –º–æ–∂–Ω–æ –∑–∞–∫–∏–Ω—É—Ç—å. üëå
—Å) –ü—É–Ω–∫—Ç —Ö–µ—à –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è get(key) (–º—ã –≤—ã—á–∏—Å–ª—è–µ–º –ø–æ —ç—Ç–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é). üëå
3. –ï—Å—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–ª–∞—Å—Å Node(–ù–∞–≥–ª–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª) üëå
a) –°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–¥–∞, –≤ –∫–æ—Ç–æ—Ä—É—é –º—ã –ø–æ–º–µ—â–∞–µ–º –∫–ª—é—á/value/hash –ø–æ hash –ø–æ–∑–∏—Ü–∏–∏. üëå
–±) –í —Å–ª—É—á–∞–µ put, –µ—Å–ª–∏ key —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —Ö–µ—à–µ–º equals key —Å —É–∂–µ –≥–æ—Ç–æ–≤—ã–º –∫–ª—é—á–µ–º, –≤—Ç–æ—Ä–æ–π —Ç–µ—Ä—è–µ—Ç—Å—è –≤ –Ω–µ–±—ã—Ç–∏–µ ;(
4. –í –º–µ—Ç–æ–¥–µ put, –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ putValue(hash, key, value) üëå
–í —Ä–µ—Å–∞–π–∑–µ
1. –ú—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ (array) –≤ –Ω—É–ª–ª –∏–ª–∏ length == 0
–í —Å–ª—É—á–∞–µ —Ç—Ä—É, –º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ resize() –∏–∑–Ω–∏—á–∞–ª—å–Ω—É—é —Ö–µ—à–º–∞–ø—É. –∏ –≥–¥–µ-—Ç–æ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –¥–ª–∏–Ω—É(–∞ –Ω–∞–¥–æ?)
–∞) –ú–µ—Ç–æ–¥ —Ä–µ—Å–∞–π–∑ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –Ω–æ–≤–æ–≥–æ.
–ü–æ–¥–ø—É–Ω–∫—Ç—ã –ø–æ —Ä–µ—Å–∞–π–∑—É:
1) –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ capacity
–í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ capactity == 0 && old thr == 0 TODO
capacity = 16
newThr = load factor * 16
thr –Ω—É–∂–µ–Ω, —á—Ç–æ–± –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–≥–¥–∞ –Ω–∞–º –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å resize()
if(++size



 */